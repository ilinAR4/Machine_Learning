"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ RecGym
–°–æ–∑–¥–∞—ë—Ç CSV —Ñ–∞–π–ª —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import pandas as pd
import numpy as np
from tqdm import tqdm

def generate_recgym_demo_data(num_samples=10000, output_file='data/recgym_demo.csv'):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö RecGym
    
    Args:
        num_samples (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        output_file (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV
    """
    print(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {num_samples} –∑–∞–ø–∏—Å–µ–π –¥–µ–º–æ-–¥–∞—Ç–∞—Å–µ—Ç–∞ RecGym...")
    
    exercises = ['Adductor', 'ArmCurl', 'BenchPress', 'LegCurl', 'LegPress', 
                 'Ride', 'RopeJumping', 'Run', 'Squat', 'StairUp', 'Walk', 'Null']
    
    positions = ['Wrist', 'Pocket', 'Calf']
    subjects = list(range(1, 11))
    sessions = list(range(1, 6))
    
    data = []
    
    for i in tqdm(range(num_samples), desc="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"):
        exercise = np.random.choice(exercises)
        subject = np.random.choice(subjects)
        position = np.random.choice(positions)
        session = np.random.choice(sessions)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        if exercise == 'Squat':
            # –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è: –±–æ–ª—å—à–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ Y, —Å—Ä–µ–¥–Ω–∏–µ –ø–æ X –∏ Z
            accel = np.random.normal([0, 9.8, 0], [2, 1, 2])
            gyro = np.random.normal([1, 0.5, 0], [0.5, 0.3, 0.2])
            capacitance = np.random.normal(800, 50)
            
        elif exercise == 'Run':
            # –ë–µ–≥: –≤—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —É—Å–∫–æ—Ä–µ–Ω–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ Y
            accel = np.random.normal([0, 12, 0], [3, 2, 3])
            gyro = np.random.normal([2, 1, 1], [1, 0.8, 0.8])
            capacitance = np.random.normal(750, 60)
            
        elif exercise == 'BenchPress':
            # –ñ–∏–º –ª—ë–∂–∞: –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            accel = np.random.normal([0, 0, 9.8], [1.5, 1.5, 1])
            gyro = np.random.normal([0, 1, 0.5], [0.3, 0.5, 0.3])
            capacitance = np.random.normal(850, 40)
            
        elif exercise == 'Walk':
            # –•–æ–¥—å–±–∞: —É–º–µ—Ä–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            accel = np.random.normal([0, 10, 0], [1, 0.5, 1])
            gyro = np.random.normal([0.3, 0.3, 0.5], [0.2, 0.2, 0.3])
            capacitance = np.random.normal(780, 45)
            
        elif exercise == 'Null':
            # –û—Ç–¥—ã—Ö: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            accel = np.random.normal([0, 9.8, 0], [0.3, 0.2, 0.3])
            gyro = np.random.normal([0, 0, 0], [0.05, 0.05, 0.05])
            capacitance = np.random.normal(820, 30)
            
        elif exercise == 'RopeJumping':
            # –ü—Ä—ã–∂–∫–∏ –Ω–∞ —Å–∫–∞–∫–∞–ª–∫–µ: –≤—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞, –±–æ–ª—å—à–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            accel = np.random.normal([0, 13, 0], [3.5, 2.5, 3.5])
            gyro = np.random.normal([2.5, 1.5, 1.5], [1.2, 1, 1])
            capacitance = np.random.normal(740, 70)
            
        elif exercise == 'StairUp':
            # –ü–æ–¥—ä—ë–º –ø–æ –ª–µ—Å—Ç–Ω–∏—Ü–µ: —Ä–∏—Ç–º–∏—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ Y
            accel = np.random.normal([0, 11, 0], [2, 1.5, 2])
            gyro = np.random.normal([1.5, 1, 0.8], [0.7, 0.6, 0.5])
            capacitance = np.random.normal(790, 55)
            
        elif exercise == 'Ride':
            # –í–µ–ª–æ—Å–∏–ø–µ–¥: —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –Ω–æ–≥
            accel = np.random.normal([0, 9.5, 0], [1.5, 1, 1.5])
            gyro = np.random.normal([1, 0.8, 1.2], [0.5, 0.4, 0.6])
            capacitance = np.random.normal(810, 45)
            
        elif exercise == 'ArmCurl':
            # –°–≥–∏–±–∞–Ω–∏–µ —Ä—É–∫: –¥–≤–∏–∂–µ–Ω–∏—è –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            accel = np.random.normal([0, 8, 2], [1.5, 1, 1.5])
            gyro = np.random.normal([0.5, 1.5, 0.5], [0.3, 0.7, 0.3])
            capacitance = np.random.normal(830, 40)
            
        elif exercise == 'LegPress':
            # –ñ–∏–º –Ω–æ–≥–∞–º–∏: —Ç–æ–ª—á–∫–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è
            accel = np.random.normal([0, 10.5, 0], [2, 1.5, 2])
            gyro = np.random.normal([1, 0.5, 0.5], [0.5, 0.3, 0.3])
            capacitance = np.random.normal(860, 45)
            
        elif exercise == 'LegCurl':
            # –°–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥: –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è
            accel = np.random.normal([0, 9, 0], [1.5, 1, 1.5])
            gyro = np.random.normal([0.8, 0.5, 0.8], [0.4, 0.3, 0.4])
            capacitance = np.random.normal(840, 40)
            
        else:  # Adductor
            # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ: –±–æ–∫–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è
            accel = np.random.normal([1.5, 9.8, 0], [1.5, 1, 1.5])
            gyro = np.random.normal([0.5, 0.3, 1], [0.3, 0.2, 0.5])
            capacitance = np.random.normal(820, 45)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–∞—Ç—á–∏–∫–∞
        if position == 'Wrist':
            # –ó–∞–ø—è—Å—Ç—å–µ: –±–æ–ª—å—à–µ –¥–≤–∏–∂–µ–Ω–∏–π –≤ —Ä—É–∫–∞—Ö
            gyro = gyro * 1.3
        elif position == 'Pocket':
            # –ö–∞—Ä–º–∞–Ω: –±–æ–ª–µ–µ —Å–≥–ª–∞–∂–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            accel = accel * 0.8
            gyro = gyro * 0.7
        elif position == 'Calf':
            # –ò–∫—Ä–∞: –±–æ–ª—å—à–µ –¥–≤–∏–∂–µ–Ω–∏–π –Ω–æ–≥
            accel = accel * 1.1
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        data.append({
            'Subject': subject,
            'Position': position,
            'Session': session,
            'A_x': round(accel[0], 4),
            'A_y': round(accel[1], 4),
            'A_z': round(accel[2], 4),
            'G_x': round(gyro[0], 4),
            'G_y': round(gyro[1], 4),
            'G_z': round(gyro[2], 4),
            'C_1': round(capacitance, 2),
            'Workout': exercise
        })
    
    # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
    df = pd.DataFrame(data)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV
    df.to_csv(output_file, index=False)
    
    print(f"‚úÖ –î–∞—Ç–∞—Å–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {output_file}")
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
    print(f"üèãÔ∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {df['Workout'].nunique()}")
    print(f"üë§ –°—É–±—ä–µ–∫—Ç–æ–≤: {df['Subject'].nunique()}")
    print(f"üìç –ü–æ–∑–∏—Ü–∏–π: {df['Position'].nunique()}")
    
    print("\nüìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:")
    print(df['Workout'].value_counts().to_string())
    
    return df

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–¥–∞—Ç–∞—Å–µ—Ç–∞
    df = generate_recgym_demo_data(
        num_samples=10000,
        output_file='data/recgym_demo.csv'
    )
    
    print("\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üìÅ –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
